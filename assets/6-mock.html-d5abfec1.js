import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as s,d as n,b as p,e as a}from"./app-cf691029.js";const l={},u=a('<h1 id="数据-mock-联调" tabindex="-1"><a class="header-anchor" href="#数据-mock-联调" aria-hidden="true">#</a> 数据 mock&amp;联调</h1><h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h2><p>如果前端应用和后端接口服务器没有运行在同一个主机上，你需要在开发环境下将接口请求代理到接口服务器。</p><p>如果是同一个主机，可以直接请求具体的接口地址。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>开发环境时候，接口地址在项目根目录下</p>',6),r={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/.env.development",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># vite 本地跨域代理</span>
<span class="token assign-left variable">VITE_PROXY</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;/basic-api&quot;</span>,<span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 接口地址</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>/api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>.env 文件中的字段如果是字符串，则无需加引号，默认全部为字符串</li><li>VITE_PROXY 不能换行</li></ul></div><h3 id="跨域处理" tabindex="-1"><a class="header-anchor" href="#跨域处理" aria-hidden="true">#</a> 跨域处理</h3><p>如果你在 <code>src/api/</code> 下面的接口为下方代码，且 <strong>.env.development</strong> 文件配置如下注释，则在控制台看到的地址为 <code>http://localhost:3100/basic-api/login</code>。</p>`,4),d=s("code",null,"/basic-api",-1),v=s("code",null,"VITE_PROXY",-1),m={href:"http://localhost:3000/login**%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%90%8C%E6%97%B6%E4%B9%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82%EF%BC%88**3100**%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%8C**http://localhost:3000**%E4%B8%BA",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .env.development</span>
<span class="token comment">// VITE_PROXY=[[&quot;/basic-api&quot;,&quot;http://localhost:3000&quot;]]</span>
<span class="token comment">// VITE_GLOB_API_URL=/basic-api</span>

<span class="token keyword">enum</span> Api <span class="token punctuation">{</span>
  Login <span class="token operator">=</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>: 用户登陆
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginApi</span><span class="token punctuation">(</span>params<span class="token operator">:</span> LoginParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>LoginResultModel<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> Api<span class="token punctuation">.</span>Login<span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    params<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="没有跨域时的配置" tabindex="-1"><a class="header-anchor" href="#没有跨域时的配置" aria-hidden="true">#</a> 没有跨域时的配置</h3><p>如果没有跨域问题，可以直接忽略 <strong>VITE_PROXY</strong> 配置，直接将接口地址设置在 <strong>VITE_GLOB_API_URL</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 例如接口地址为 http://localhost:3000 则</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>http://localhost:3000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有跨域问题，将 <strong>VITE_GLOB_API_URL</strong> 设置为跟 <strong>VITE_PROXY</strong> 内其中一个数组的第一个项一致的值即可。</p><p>下方的接口地址设置为 <code>/basic-api</code>，当请求发出的时候会经过 Vite 的 proxy 代理，匹配到了我们设置的 <strong>VITE_PROXY</strong> 规则，将 <code>/basic-api</code> 转化为 <code>http://localhost:3000</code> 进行请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 例如接口地址为 http://localhost:3000 则</span>
<span class="token assign-left variable">VITE_PROXY</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;/basic-api&quot;</span>,<span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 接口地址</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>/basic-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨域原理解析" tabindex="-1"><a class="header-anchor" href="#跨域原理解析" aria-hidden="true">#</a> 跨域原理解析</h3><p>在 <code>vite.config.ts</code> 配置文件中，提供了 server 的 proxy 功能，用于代理 API 请求。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>server<span class="token operator">:</span> <span class="token punctuation">{</span>
  proxy<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/basic-api&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      target<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>
      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^/basic-api</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>从浏览器控制台的 Network 看，请求是 <code>http://localhost:3000/basic-api/xxx</code>，这是因为 proxy 配置不会改变本地请求的 url。</p></div><h2 id="生产环境" tabindex="-1"><a class="header-anchor" href="#生产环境" aria-hidden="true">#</a> 生产环境</h2>`,12),g={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/.env.production",target:"_blank",rel:"noopener noreferrer"},h=a('<p>生产环境接口地址值需要修改 <strong>VITE_GLOB_API_URL</strong>，如果出现跨域问题，可以使用 nginx 或者后台开启 cors 进行处理</p><div class="hint-container tip"><p class="hint-container-title">打包后如何进行地址修改?</p><p><strong>VITE_GLOB_*</strong> 开头的变量会在打包的时候注入 <strong>_app.config.js</strong> 文件内。</p><p>在 <strong>dist/_app.config.js</strong> 修改相应的接口地址后刷新页面即可，不需要在根据不同环境打包多次，一次打包可以用于多个不同接口环境的部署。</p></div><h2 id="接口请求" tabindex="-1"><a class="header-anchor" href="#接口请求" aria-hidden="true">#</a> 接口请求</h2><p>在 vue-vben-admin 中:</p><ol><li>页面交互操作；</li><li>调用统一管理的 api 请求函数；</li><li>使用封装的 axios.ts 发送请求；</li><li>获取服务端返回数据</li><li>更新 data；</li></ol>',5),y={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/src/api",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>以登陆接口为例:</p><p>在 <strong>src/api/</strong> 内新建模块文件，其中参数与返回值最好定义一下类型，方便校验。虽然麻烦，但是后续维护字段很方便。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>类型定义文件可以抽取出去统一管理，具体参考项目</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defHttp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/@/utils/http/axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginParams<span class="token punctuation">,</span> LoginResultModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./model/userModel&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> Api <span class="token punctuation">{</span>
  Login <span class="token operator">=</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginApi</span><span class="token punctuation">(</span>params<span class="token operator">:</span> LoginParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> defHttp<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>LoginResultModel<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> Api<span class="token punctuation">.</span>Login<span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    params<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios-配置" tabindex="-1"><a class="header-anchor" href="#axios-配置" aria-hidden="true">#</a> axios 配置</h2>`,5),w=s("strong",null,"axios",-1),_={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/src/utils/http/axios",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>除 <code>index.ts</code> 文件内容需要根据项目自行修改外，其余文件无需修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
├── Axios<span class="token punctuation">.</span>ts <span class="token comment">// axios实例</span>
├── axiosCancel<span class="token punctuation">.</span>ts <span class="token comment">// axiosCancel实例，取消重复请求</span>
├── axiosTransform<span class="token punctuation">.</span>ts <span class="token comment">// 数据转换类</span>
├── checkStatus<span class="token punctuation">.</span>ts <span class="token comment">// 返回状态值校验</span>
├── index<span class="token punctuation">.</span>ts <span class="token comment">// 接口返回统一处理</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="index-ts-配置说明" tabindex="-1"><a class="header-anchor" href="#index-ts-配置说明" aria-hidden="true">#</a> index.ts 配置说明</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 认证方案，例如: Bearer</span>
  <span class="token comment">// https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes</span>
  authenticationScheme<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 接口超时时间 单位毫秒</span>
  timeout<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token comment">// 接口可能会有通用的地址部分，可以统一抽取出来</span>
  prefixUrl<span class="token operator">:</span> prefix<span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> ContentTypeEnum<span class="token punctuation">.</span><span class="token constant">JSON</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据处理方式，见下方说明</span>
  transform<span class="token punctuation">,</span>
  <span class="token comment">// 配置项，下面的选项都可以在独立的接口请求中覆盖</span>
  requestOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认将prefix 添加到url</span>
    joinPrefix<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否返回原生响应头 比如：需要获取响应头时使用该属性</span>
    isReturnNativeResponse<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 需要对返回数据进行处理</span>
    isTransformRequestResult<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// post请求的时候添加参数到url</span>
    joinParamsToUrl<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 格式化提交参数时间</span>
    formatDate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 消息提示类型</span>
    errorMessageMode<span class="token operator">:</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 接口地址</span>
    apiUrl<span class="token operator">:</span> globSetting<span class="token punctuation">.</span>apiUrl<span class="token punctuation">,</span>
    <span class="token comment">//  是否加入时间戳</span>
    joinTime<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 忽略重复请求</span>
    ignoreCancelToken<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>transform 数据处理说明</strong></p><p>类型定义，见 <strong>axiosTransform.ts</strong> 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> abstract <span class="token keyword">class</span> <span class="token class-name">AxiosTransform</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前处理配置
   */</span>
  beforeRequestHook<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求成功处理
   */</span>
  transformRequestData<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求失败处理
   */</span>
  requestCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前的拦截器
   */</span>
  requestInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之后的拦截器
   */</span>
  responseInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前的拦截器错误处理
   */</span>
  requestInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之后的拦截器错误处理
   */</span>
  responseInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目默认 transform 处理逻辑，可以根据各自项目进行处理。一般需要更改的部分为下方代码，见代码注释说明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>: 数据处理，方便区分多种处理方式
 */</span>
<span class="token keyword">const</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> AxiosTransform <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 处理请求数据。如果数据不是预期格式，可直接抛出错误
   */</span>
  <span class="token function-variable function">transformRequestHook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> isTransformResponse<span class="token punctuation">,</span> isReturnNativeResponse <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
    <span class="token comment">// 是否返回原生响应头 比如：需要获取响应头时使用该属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isReturnNativeResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不进行任何处理，直接返回</span>
    <span class="token comment">// 用于页面代码可能需要直接获取code，data，message这些信息时开启</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTransformResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 错误的时候返回</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// return &#39;[HTTP] Request has no return value&#39;;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.apiRequestFailed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//  这里 code，result，message为 后台统一的字段，需要在 types.ts内修改为项目自己的接口返回格式</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> result<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>

    <span class="token comment">// 这里逻辑可以根据项目进行修改</span>
    <span class="token keyword">const</span> hasSuccess <span class="token operator">=</span> data <span class="token operator">&amp;&amp;</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在此处根据自己项目的实际情况对不同的code执行不同的操作</span>
    <span class="token comment">// 如果不希望中断当前请求，请return数据，否则直接抛出异常即可</span>
    <span class="token keyword">let</span> timeoutMsg <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token operator">:</span>
        timeoutMsg <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.timeoutMessage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          timeoutMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// errorMessageMode=‘modal’的时候会显示modal错误弹窗，而不是消息提示，用于一些比较重要的错误</span>
    <span class="token comment">// errorMessageMode=&#39;none&#39; 一般是调用时明确表示不希望自动弹出错误提示</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>errorMessageMode <span class="token operator">===</span> <span class="token string">&#39;modal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">createErrorModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.errorTip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> timeoutMsg <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>errorMessageMode <span class="token operator">===</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      createMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>timeoutMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>timeoutMsg <span class="token operator">||</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.apiRequestFailed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 请求之前处理config</span>
  <span class="token function-variable function">beforeRequestHook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> apiUrl<span class="token punctuation">,</span> joinPrefix<span class="token punctuation">,</span> joinParamsToUrl<span class="token punctuation">,</span> formatDate<span class="token punctuation">,</span> joinTime <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>joinPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>urlPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>apiUrl <span class="token operator">&amp;&amp;</span> <span class="token function">isString</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> config<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> RequestEnum<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 给 get 请求加上时间戳参数，避免从缓存中拿数据。</span>
        config<span class="token punctuation">.</span>params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 兼容restful风格</span>
        config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatDate <span class="token operator">&amp;&amp;</span> <span class="token function">formatRequestDate</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span>data <span class="token operator">=</span> params<span class="token punctuation">;</span>
        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>joinParamsToUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">setObjToUrlParams</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url <span class="token keyword">as</span> string<span class="token punctuation">,</span> config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 兼容restful风格</span>
        config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params<span class="token punctuation">;</span>
        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求拦截器处理
   */</span>
  <span class="token function-variable function">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求之前处理config</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// jwt token</span>
      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> options<span class="token punctuation">.</span>authenticationScheme
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>authenticationScheme<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token operator">:</span> token<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 响应拦截器处理
   */</span>
  <span class="token function-variable function">responseInterceptors</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 响应错误处理
   */</span>
  <span class="token function-variable function">responseInterceptorsCatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> errorLogStore <span class="token operator">=</span> <span class="token function">useErrorLogStoreWithOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    errorLogStore<span class="token punctuation">.</span><span class="token function">addAjaxErrorInfo</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> response<span class="token punctuation">,</span> code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> errorMessageMode <span class="token operator">=</span> config<span class="token operator">?.</span>requestOptions<span class="token operator">?.</span>errorMessageMode <span class="token operator">||</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> string <span class="token operator">=</span> response<span class="token operator">?.</span>data<span class="token operator">?.</span>error<span class="token operator">?.</span>message <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token literal-property property">err</span><span class="token operator">:</span> string <span class="token operator">=</span> error<span class="token operator">?.</span>toString<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> errMessage <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token string">&#39;ECONNABORTED&#39;</span> <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        errMessage <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.apiTimeoutMessage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;Network Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        errMessage <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.networkExceptionMsg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>errMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">&#39;modal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">createErrorModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;sys.api.errorTip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> errMessage <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          createMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">checkStatus</span><span class="token punctuation">(</span>error<span class="token operator">?.</span>response<span class="token operator">?.</span>status<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> errorMessageMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改参数格式" tabindex="-1"><a class="header-anchor" href="#更改参数格式" aria-hidden="true">#</a> 更改参数格式</h3><p>项目接口默认为 Json 参数格式，即 <code>headers: { &#39;Content-Type&#39;: ContentTypeEnum.JSON }</code>,</p><p>如果需要更改为 <code>form-data</code> 格式，更改 headers 的 <code>&#39;Content-Type</code> 为 <code>ContentTypeEnum.FORM_URLENCODED</code> 即可</p><h3 id="多个接口地址" tabindex="-1"><a class="header-anchor" href="#多个接口地址" aria-hidden="true">#</a> 多个接口地址</h3>`,13),q={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/src/utils/http/axios/index.ts",target:"_blank",rel:"noopener noreferrer"},M=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 目前只导出一个默认实例，接口地址对应的是环境变量中的 VITE_GLOB_API_URL 接口地址</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> defHttp <span class="token operator">=</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 需要有其他接口地址的可以在后面添加</span>

<span class="token comment">// other api url</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> otherHttp <span class="token operator">=</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  requestOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    apiUrl<span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除请求-url-携带的时间戳参数" tabindex="-1"><a class="header-anchor" href="#删除请求-url-携带的时间戳参数" aria-hidden="true">#</a> 删除请求 URL 携带的时间戳参数</h3><p>如果不需要 url 上面默认携带的时间戳参数 <code>?_t=xxx</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  requestOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否加入时间戳</span>
    joinTime<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mock-服务" tabindex="-1"><a class="header-anchor" href="#mock-服务" aria-hidden="true">#</a> Mock 服务</h2><p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发进程所阻塞。</p>`,6),E={href:"https://github.com/vbenjs/vite-plugin-mock",target:"_blank",rel:"noopener noreferrer"},T=s("strong",null,"项目内 mock 服务分本地和线上",-1),R=a(`<h3 id="本地-mock" tabindex="-1"><a class="header-anchor" href="#本地-mock" aria-hidden="true">#</a> 本地 Mock</h3><p>本地 mock 采用 Node.js 中间件进行参数拦截（不采用 mock.js 的原因是本地开发看不到请求参数和响应结果）。</p><h4 id="如何新增-mock-接口" tabindex="-1"><a class="header-anchor" href="#如何新增-mock-接口" aria-hidden="true">#</a> 如何新增 mock 接口</h4><p>如果你想添加 mock 数据，只要在根目录下找到 mock 文件，添加对应的接口，对其进行拦截和模拟数据。</p><p>在 mock 文件夹内新建文件</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件新增后会自动更新，不需要手动重启，可以在代码控制台查看日志信息 mock 文件夹内会自动注册，排除以_开头的文件夹及文件</p></div><p>例:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MockMethod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-mock&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resultPageSuccess <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../_util&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> demoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      beginTime<span class="token operator">:</span> <span class="token string">&quot;@datetime&quot;</span><span class="token punctuation">,</span>
      endTime<span class="token operator">:</span> <span class="token string">&quot;@datetime&quot;</span><span class="token punctuation">,</span>
      address<span class="token operator">:</span> <span class="token string">&quot;@city()&quot;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&quot;@cname()&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;no|100000-10000000&quot;</span><span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;status|1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;正常&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;启用&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;停用&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/api/table/getDemoList&quot;</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">resultPageSuccess</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> demoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token keyword">as</span> MockMethod<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),P={class:"hint-container tip"},A=s("p",{class:"hint-container-title"},"提示",-1),j={href:"https://github.com/nuysoft/Mock/wiki",target:"_blank",rel:"noopener noreferrer"},S=a(`<h4 id="接口格式" tabindex="-1"><a class="header-anchor" href="#接口格式" aria-hidden="true">#</a> 接口格式</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// mock 接口地址</span>
  method<span class="token operator">?</span><span class="token operator">:</span> MethodType<span class="token punctuation">;</span> <span class="token comment">// 请求方式</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 延时时间</span>
  statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 响应状态码</span>
  response<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 响应结果</span>
      body<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">|</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数获取" tabindex="-1"><a class="header-anchor" href="#参数获取" aria-hidden="true">#</a> 参数获取</h4><p><strong>GET 接口：</strong><code> ({ query }) =&gt; { }</code></p><p><strong>POST 接口：</strong><code> ({ body }) =&gt; { }</code></p><h4 id="util-说明" tabindex="-1"><a class="header-anchor" href="#util-说明" aria-hidden="true">#</a> util 说明</h4>`,6),O={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/mock/_util.ts",target:"_blank",rel:"noopener noreferrer"},L=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>util 只作为服务处理结果数据使用。可以不用，如需使用可自行封装，需要将对应的字段改为接口的返回结构</p></div><h4 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h4><p>在 <code>src/api</code> 下面，如果接口匹配到 mock，则会优先使用 mock 进行响应</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defHttp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/@/utils/http/axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginParams<span class="token punctuation">,</span> LoginResultModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./model/userModel&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> Api <span class="token punctuation">{</span>
  Login <span class="token operator">=</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>: user login api
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginApi</span><span class="token punctuation">(</span>params<span class="token operator">:</span> LoginParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> defHttp<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>LoginResultModel<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      url<span class="token operator">:</span> Api<span class="token punctuation">.</span>Login<span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
      params<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      errorMessageMode<span class="token operator">:</span> <span class="token string">&quot;modal&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 会匹配到上方的</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/api/login&quot;</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> body <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resultPageSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token keyword">as</span> MockMethod<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接口有了-如何去掉-mock" tabindex="-1"><a class="header-anchor" href="#接口有了-如何去掉-mock" aria-hidden="true">#</a> 接口有了，如何去掉 mock</h4><p>当后台接口已经开发完成，只需要将相应的 mock 函数去掉即可。</p><p>以上方接口为例，假如后台接口 login 已经开发完成，则只需要删除/注释掉下方代码即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/api/login&quot;</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> body <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resultPageSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token keyword">as</span> MockMethod<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线上-mock" tabindex="-1"><a class="header-anchor" href="#线上-mock" aria-hidden="true">#</a> 线上 mock</h3><p>由于该项目是一个展示类项目，线上也是用 mock 数据，所以在打包后同时也集成了 mock。通常项目线上一般为正式接口。</p>`,10),I={href:"https://github.com/nuysoft/Mock/wiki",target:"_blank",rel:"noopener noreferrer"},C=a(`<h4 id="线上如何开启-mock" tabindex="-1"><a class="header-anchor" href="#线上如何开启-mock" aria-hidden="true">#</a> 线上如何开启 mock</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><p>线上开启 mock 只适用于一些简单的示例网站及预览网站。<strong>一定不要在正式的生产环境开启！！！</strong></p></div><ol><li>修改 .env.production 文件内的 <code>VITE_USE_MOCK</code> 的值为 true</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">VITE_USE_MOCK</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),B={start:"2"},U={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/mock/_createProductionServer.ts",target:"_blank",rel:"noopener noreferrer"},V=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createProdMockServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-mock/es/createProdMockServer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&quot;./**/*.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockModules<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;/_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  mockModules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>modules<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupProdMockServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">createProdMockServer</span><span class="token punctuation">(</span>mockModules<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={start:"3"},F={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/build/vite/plugin/mock.ts",target:"_blank",rel:"noopener noreferrer"},G=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> viteMockServe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-mock&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">configMockPlugin</span><span class="token punctuation">(</span>isBuild<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">viteMockServe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    injectCode<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      import { setupProdMockServer } from &#39;../mock/_createProductionServer&#39;;

      setupProdMockServer();
      </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">为什么通过插件注入代码而不是直接在 main.ts 内插入</p><p>在插件内通过 <code>injectCode</code> 插入代码，方便控制 mockjs 是否被打包到最终代码内。如果在 main.ts 内判断，如果关闭了 mock 功能，mockjs 也会打包到构建文件内，这样会增加打包体积。</p></div><p>到这里线上 mock 就配置完成了。线上与本地差异不大，比较大的区别是线上在控制台内看不到接口请求日志。</p>`,3);function H(D,X){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[s("a",r,[n(".env.development"),p(t)]),n(" 文件配置")]),k,s("p",null,[n("由于 "),d,n(" 匹配到了设置的 "),v,n("，所以上方实际是请求 **"),s("a",m,[n("http://localhost:3000/login**，这样同时也解决了跨域问题。（**3100**为项目端口号，**http://localhost:3000**为"),p(t)]),n(" PROXY 代理的目标地址）")]),b,s("p",null,[n("生产环境接口地址在项目根目录下 "),s("a",g,[n(".env.production"),p(t)]),n(" 文件配置。")]),h,s("p",null,[n("接口统一存放于 "),s("a",y,[n("src/api/"),p(t)]),n(" 下面管理")]),f,s("p",null,[w,n(" 请求封装存放于 "),s("a",_,[n("src/utils/http/axios"),p(t)]),n(" 文件夹内部")]),x,s("p",null,[n("当项目中需要用到多个接口地址时, 可以在 "),s("a",q,[n("src/utils/http/axios/index.ts"),p(t)]),n(" 导出多个 axios 实例")]),M,s("p",null,[n("本项目使用 "),s("a",E,[n("vite-plugin-mock"),p(t)]),n(" 来进行 mock 数据处理。"),T,n("。")]),R,s("div",P,[A,s("p",null,[n("mock 的值可以直接使用 "),s("a",j,[n("mockjs"),p(t)]),n(" 的语法。")])]),S,s("p",null,[n("可在 "),s("a",O,[n("代码"),p(t)]),n(" 中查看")]),L,s("p",null,[n("项目线上 mock 采用的是 "),s("a",I,[n("mockjs"),p(t)]),n(" 进行 mock 数据模拟。")]),C,s("ol",B,[s("li",null,[n("在 "),s("a",U,[n("mock/_createProductionServer.ts"),p(t)]),n(" 文件中引入需要的 mock 文件")])]),V,s("ol",N,[s("li",null,[n("在 "),s("a",F,[n("build/vite/plugin/mock.ts"),p(t)]),n(" 里面引入")])]),G])}const z=e(l,[["render",H],["__file","6-mock.html.vue"]]);export{z as default};
