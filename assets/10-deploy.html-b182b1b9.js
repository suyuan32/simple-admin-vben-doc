import{_ as t}from"./report-64961180.js";import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c,a as n,d as e,b as s,e as i}from"./app-908acf4f.js";const d={},p=n("h1",{id:"build-deploy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#build-deploy","aria-hidden":"true"},"#"),e(" Build & Deploy")],-1),u={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"Preface",-1),m=n("p",null,"Since this is a demonstration project, the package is relatively large after packaging. If there are plugins that are not used in the project, you can delete the corresponding files or routes and not reference them. If they are not referenced, they will not be packaged.",-1),h={href:"https://github.com/vbenjs/vben-admin-thin-next",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> Build</h2><p>After the project development is completed, execute the following command to build</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After the build and packaging is successful, a dist folder will be generated in the root directory, which contains the built and packaged files.</p><h3 id="compatibility-with-older-browsers" tabindex="-1"><a class="header-anchor" href="#compatibility-with-older-browsers" aria-hidden="true">#</a> Compatibility with older browsers</h3><p>In <strong>.env.production</strong></p><p>Set <code>VITE_LEGACY=true</code> to package code compatible with older browsers</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>VITE_LEGACY <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="preview" tabindex="-1"><a class="header-anchor" href="#preview" aria-hidden="true">#</a> Preview</h3><p>Before publishing, you can preview it locally. There are many ways. Here are two ways to introduce it.</p><p><strong>You cannot directly open the built html file</strong></p><ul><li>Preview using the project&#39;s own command (recommended)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Preview after packaging first</span>
<span class="token function">pnpm</span> preview
<span class="token comment"># Directly preview the local dist file directory</span>
<span class="token function">pnpm</span> preview:dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Local server preview (via live-server)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1. Install live-server globally</span>
<span class="token function">pnpm</span> global <span class="token function">add</span> live-server
<span class="token comment"># 2. Enter the packaged directory</span>
<span class="token builtin class-name">cd</span> ./dist
<span class="token comment"># Local preview, default port 8080</span>
live-server
<span class="token comment"># Specify port</span>
live-server <span class="token parameter variable">--port</span> <span class="token number">9000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="analyze-build-file-size" tabindex="-1"><a class="header-anchor" href="#analyze-build-file-size" aria-hidden="true">#</a> Analyze build file size</h3>`,16),g={href:"https://github.com/doesdev/rollup-plugin-analyzer",target:"_blank",rel:"noopener noreferrer"},k=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> report

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After running, you can see the specific volume distribution on the automatically opened page to analyze which dependencies have problems.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You can switch to display gzip or brotli in the upper left corner.</p></div><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="compression" tabindex="-1"><a class="header-anchor" href="#compression" aria-hidden="true">#</a> Compression</h2><h3 id="enable-gzip-compression" tabindex="-1"><a class="header-anchor" href="#enable-gzip-compression" aria-hidden="true">#</a> Enable gzip compression</h3><p>Enabling gzip and using nginx&#39;s <code>gzip_static</code> function can greatly speed up page access.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Just enable <code>VITE_BUILD_COMPRESS=&#39;gzip&#39;</code> to generate .gz files while packaging.</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Configure and change according to your own path</span>
<span class="token comment"># For example, if it is deployed under the nginx /next/ path, then VITE_PUBLIC_PATH=/next/</span>
<span class="token assign-left variable">VITE_PUBLIC_PATH</span><span class="token operator">=</span>/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enable-brotli-compression" tabindex="-1"><a class="header-anchor" href="#enable-brotli-compression" aria-hidden="true">#</a> Enable brotli compression</h3><p>brotli is an algorithm with a higher compression rate than gzip. It can coexist with gzip without conflict. You need to install a specific module in nginx and enable it.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Just enable <code>VITE_BUILD_COMPRESS=&#39;brotli&#39;</code> to generate .br files while packaging.</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Configure and change according to your own path</span>
<span class="token comment"># For example, if it is deployed under the nginx /next/ path, then VITE_PUBLIC_PATH=/next/</span>
<span class="token assign-left variable">VITE_PUBLIC_PATH</span><span class="token operator">=</span>/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enable-both-gzip-and-brotli-at-the-same-time" tabindex="-1"><a class="header-anchor" href="#enable-both-gzip-and-brotli-at-the-same-time" aria-hidden="true">#</a> Enable both gzip and brotli at the same time</h3><p>Just enable <code>VITE_BUILD_COMPRESS=&#39;brotli,gzip&#39;</code> to generate <code>.gz</code> and <code>.br</code> files while packaging.</p><h3 id="configuration-of-gzip-and-brotli-in-nginx" tabindex="-1"><a class="header-anchor" href="#configuration-of-gzip-and-brotli-in-nginx" aria-hidden="true">#</a> Configuration of gzip and brotli in nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http <span class="token punctuation">{</span>
   <span class="token comment"># Enable gzip</span>
   <span class="token function">gzip</span> on<span class="token punctuation">;</span>
   <span class="token comment"># Turn on gzip_static</span>
   <span class="token comment"># After gzip_static is turned on, an error may be reported, and the corresponding module needs to be installed. The specific installation method can be queried by yourself</span>
   <span class="token comment"># Only if this is enabled, the .gz file packaged by the vue file will be effective, otherwise you don&#39;t need to open gzip for packaging</span>
   gzip_static on<span class="token punctuation">;</span>
   gzip_proxied any<span class="token punctuation">;</span>
   gzip_min_length 1k<span class="token punctuation">;</span>
   gzip_buffers <span class="token number">4</span> 16k<span class="token punctuation">;</span>
   <span class="token comment"># If multi-layer proxy is used in nginx, this must be set to enable gzip.</span>
   gzip_http_version <span class="token number">1.0</span><span class="token punctuation">;</span>
   gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span>
   gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png<span class="token punctuation">;</span>
   gzip_vary off<span class="token punctuation">;</span>
   gzip_disable <span class="token string">&quot;MSIE [1-6]\\.&quot;</span><span class="token punctuation">;</span>

   <span class="token comment"># Enable brotli compression</span>
   <span class="token comment"># Need to install the corresponding nginx module, the specific installation method can be queried by yourself</span>
   <span class="token comment"># Can coexist with gzip without conflict</span>
   brotli on<span class="token punctuation">;</span>
   brotli_comp_level <span class="token number">6</span><span class="token punctuation">;</span>
   brotli_buffers <span class="token number">16</span> 8k<span class="token punctuation">;</span>
   brotli_min_length <span class="token number">20</span><span class="token punctuation">;</span>
   brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> Deployment</h2><div class="hint-container danger"><p class="hint-container-title">Note</p><p>The project is enabled by default in the production environment Mock, which is not good. It is only for the demonstration environment to have data. It is not recommended to use Mock in the production environment. Instead, you should use a real backend interface and turn off Mock.</p></div><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release" aria-hidden="true">#</a> Release</h3><p>Simple deployment only requires the final generated static files, and the static files in the dist folder are released to your cdn or static server. It should be noted that the index.html is usually the entry page of your backend service. After determining the static of js and css, you may need to change the page introduction path.</p><p>For example, upload to nginx</p><p><code>/srv/www/project/index.html</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># nginx configuration</span>
location / <span class="token punctuation">{</span>
  <span class="token comment"># Do not cache html to prevent cache from continuing to take effect after program update</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_filename</span> ~* .*<span class="token punctuation">\\</span>.<span class="token punctuation">(</span>?:htm<span class="token operator">|</span>html<span class="token punctuation">)</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    add_header Cache-Control <span class="token string">&quot;private, no-store, no-cache, must-revalidate, proxy-revalidate&quot;</span><span class="token punctuation">;</span>
    access_log on<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment"># This is where vue packaged files are stored in dist</span>
  root   /srv/www/project/<span class="token punctuation">;</span>
  index  index.html index.htm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>When deploying, you may find that the resource path is incorrect. Just modify the <code>.env.production</code> file.</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Configure and change according to your own path</span>
<span class="token comment"># Note that it needs to start and end with /</span>
<span class="token assign-left variable">VITE_PUBLIC_PATH</span><span class="token operator">=</span>/
<span class="token assign-left variable">VITE_PUBLIC_PATH</span><span class="token operator">=</span>/xxx/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="combination-of-front-end-routing-and-server" tabindex="-1"><a class="header-anchor" href="#combination-of-front-end-routing-and-server" aria-hidden="true">#</a> Combination of front-end routing and server</h3><p>The front-end routing of the project uses vue-router, so you can choose two ways: history and hash.</p><ul><li><strong>hash</strong> will append <code>#</code> after the url by default</li><li><strong>history</strong> will not, but <code>history</code> requires server cooperation</li></ul>`,29),f={href:"https://github.com/vbenjs/vue-vben-admin/tree/main/src/router/index.ts",target:"_blank",rel:"noopener noreferrer"},y=i(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  createRouter<span class="token punctuation">,</span>
  createWebHashHistory<span class="token punctuation">,</span>
  createWebHistory<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>

<span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// or</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="server-configuration-under-history-routing-mode" tabindex="-1"><a class="header-anchor" href="#server-configuration-under-history-routing-mode" aria-hidden="true">#</a> Server configuration under history routing mode</h3>`,2),_={href:"https://next.router.vuejs.org/guide/essentials/history-mode.html#html5-mode",target:"_blank",rel:"noopener noreferrer"},x=i(`<p>Here is an example of nginx configuration</p><p><strong>Deploy to root directory</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  location / <span class="token punctuation">{</span>
    <span class="token comment"># Used in conjunction with History</span>
    try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Deploy to non-root directory</strong></p><ol><li>First, you need to change the configuration when packaging</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># In .env.production, configure the subdirectory path</span>
VITE_PUBLIC_PATH <span class="token operator">=</span> /sub/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>
    location /sub/ <span class="token punctuation">{</span>
      <span class="token comment"># This is where vue packaged files are stored in dist</span>
      <span class="token builtin class-name">alias</span>   /srv/www/project/<span class="token punctuation">;</span>
      index index.html index.htm<span class="token punctuation">;</span>
      try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /sub/index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-nginx-to-handle-cross-domain" tabindex="-1"><a class="header-anchor" href="#use-nginx-to-handle-cross-domain" aria-hidden="true">#</a> Use nginx to handle cross-domain</h3><p>Use nginx to handle cross-domain issues after project deployment</p><ol><li>Configure the front-end project interface address</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># In .env.production, configure the interface address</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>/api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Configure nginx to forward requests to the backend</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
   listen <span class="token number">8080</span><span class="token punctuation">;</span>
   server_name localhost<span class="token punctuation">;</span>
   <span class="token comment"># Interface proxy, used to solve cross-domain problems</span>
   location /api <span class="token punctuation">{</span>
     proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>
     proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
     proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
     <span class="token comment"># Background interface address</span>
     proxy_pass http://110.110.1.1:8080/api<span class="token punctuation">;</span>
     proxy_redirect default<span class="token punctuation">;</span>
     add_header Access-Control-Allow-Origin *<span class="token punctuation">;</span>
     add_header Access-Control-Allow-Headers X-Requested-With<span class="token punctuation">;</span>
     add_header Access-Control-Allow-Methods GET,POST,OPTIONS<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function w(z,I){const a=l("ExternalLinkIcon");return r(),c("div",null,[p,n("div",u,[v,m,n("p",null,[e("Of course, you can also use the streamlined version "),n("a",h,[e("vue-vben-admin-thin"),s(a)]),e(" for development.")])]),b,n("p",null,[e("If your build file is very large, you can use the built-in "),n("a",g,[e("rollup-plugin-analyzer"),s(a)]),e(" plugin in the project to analyze the code size and optimize your code.")]),k,n("p",null,[e("You can modify mode in "),n("a",f,[e("src/router/index.ts"),s(a)])]),y,n("p",null,[e("Enabling history mode requires server configuration. For more server configuration details, see "),n("a",_,[e("history-mode"),s(a)])]),x])}const j=o(d,[["render",w],["__file","10-deploy.html.vue"]]);export{j as default};
