import{_ as a,X as o,Y as l,Z as n,a0 as t,$ as e,a2 as r,F as i}from"./framework-13746272.js";const p={},c=n("h1",{id:"codeeditor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#codeeditor","aria-hidden":"true"},"#"),t(" CodeEditor")],-1),u=n("p",null,"code editor",-1),d={class:"hint-container info"},k=n("p",{class:"hint-container-title"},"Info",-1),h={href:"https://github.com/logue/vue-codemirror6",target:"_blank",rel:"noopener noreferrer"},_=r(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeMirror</span>
    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> black</span><span class="token punctuation">&quot;</span></span></span>
    <span class="token attr-name">:lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lang<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">basic</span>
    <span class="token attr-name">:dark</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> CodeMirror <span class="token keyword">from</span> <span class="token string">&quot;vue-codemirror6&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> json<span class="token punctuation">,</span> jsonParseLinter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/lang-json&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> CodeMirror <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> lang <span class="token operator">=</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> linter <span class="token operator">=</span> <span class="token function">jsonParseLinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    value<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;{ hello: &quot;world&quot;}&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> lang<span class="token punctuation">,</span> linter <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2>`,3),m=n("thead",null,[n("tr",null,[n("th",null,"Props"),n("th",null,"Type"),n("th",null,"Information")])],-1),g=n("tr",null,[n("td",null,"model-value"),n("td",null,"string | Text"),n("td",null,[t("Text value. (Not "),n("code",null,"value"),t(")")])],-1),v=n("td",null,"basic",-1),f=n("td",null,"boolean",-1),b={href:"https://codemirror.net/docs/ref/#codemirror.basicSetup",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"minimal",-1),w=n("td",null,"boolean",-1),x={href:"https://codemirror.net/docs/ref/#codemirror.minimalSetup",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"basic",-1),S=n("tr",null,[n("td",null,"dark"),n("td",null,"boolean"),n("td",null,"Toggle Darkmode.")],-1),C=n("tr",null,[n("td",null,"placeholder"),n("td",null,"string"),n("td",null,"Add placeholder text (or HTML DOM) when blank")],-1),E=n("td",null,"wrap",-1),M=n("td",null,"boolean",-1),L={href:"https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping",target:"_blank",rel:"noopener noreferrer"},j=n("tr",null,[n("td",null,"tab"),n("td",null,"boolean"),n("td",null,"Enables tab indentation.")],-1),T=n("td",null,"allow-multiple-selections",-1),I=n("td",null,"boolean",-1),D={href:"https://codemirror.net/docs/ref/#state.EditorState%5EallowMultipleSelections",target:"_blank",rel:"noopener noreferrer"},N=n("tr",null,[n("td",null,"tab-size"),n("td",null,"number"),n("td",null,"Configures the tab size to use in this state.")],-1),P=n("tr",null,[n("td",null,"line-separator"),n("td",null,"string"),n("td",null,[t("Set line break (separetor) char. (Default is "),n("code",null,"\\n"),t(".)")])],-1),V=n("td",null,"theme",-1),U=n("td",{"[selector:":"","string]:":"",StyleSpec:""},null,-1),B={href:"https://github.com/codemirror/theme-one-dark",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"oneDark",-1),z=n("tr",null,[n("td",null,"readonly"),n("td",null,"boolean"),n("td",null,"Makes the cursor visible or you can drag the text but not edit the value.")],-1),A=n("tr",null,[n("td",null,"disabled"),n("td",null,"boolean"),n("td",null,[t("This is the reversed value of the CodeMirror editable. Similar to "),n("code",null,"readonly"),t(", but setting this value to true disables dragging.")])],-1),F=n("td",null,"lang",-1),G=n("td",null,"LanguageSupport",-1),H={href:"https://codemirror.net/6/#languages",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,"phrases",-1),R=n("td",null,"Record<string, string>",-1),X={href:"https://codemirror.net/6/examples/translate/",target:"_blank",rel:"noopener noreferrer"},Y=n("tr",null,[n("td",null,"extensions"),n("td",null,"Extension[]"),n("td",null,"Includes enhancements to extend CodeMirror.")],-1),Z=n("tr",null,[n("td",null,"linter"),n("td",null,"LintSource"),n("td",null,[t("Set Linter. Enter a linter (eg "),n("code",null,"esLint([arbitrary rule])"),t(" function for "),n("code",null,"@codemirror/lang-javascript"),t(", "),n("code",null,"jsonParseLinter()"),t("function for"),n("code",null,"@codemirror/json"),t("). See the sources for various language libraries for more information.")])],-1),$=n("td",null,"linterConfig",-1),J=n("td",null,"Object",-1),K={href:"https://codemirror.net/docs/ref/#lint.linter%5Econfig",target:"_blank",rel:"noopener noreferrer"},Q=n("tr",null,[n("td",null,"gutter"),n("td",null,"boolean"),n("td",null,[t("Display 🔴 on the line where there was an error when "),n("code",null,"linter"),t(" was specified. It will not work if "),n("code",null,"linter"),t(" is not specified.")])],-1),nn=n("td",null,"gutterConfig",-1),tn=n("td",null,"Object",-1),sn={href:"https://codemirror.net/docs/ref/#lint.lintGutter%5Econfig",target:"_blank",rel:"noopener noreferrer"},en=n("tr",null,[n("td",null,"tag"),n("td",null,"string"),n("td",null,[t("HTML tags used in the component. (Default is "),n("code",null,"div"),t(" tag.)")])],-1),an=n("p",null,[t("⚠ Notice: "),n("code",null,"lang"),t(" and "),n("code",null,"linter"),t(" can also be set together in "),n("code",null,"extensions"),t(". These are separated for compatibility with previous versions of CodeMirror settings and for typing props.")],-1);function on(ln,rn){const s=i("ExternalLinkIcon");return o(),l("div",null,[c,u,n("div",d,[k,n("p",null,[t("Use "),n("a",h,[t("vue-codemirror6"),e(s)])])]),_,n("table",null,[m,n("tbody",null,[g,n("tr",null,[v,f,n("td",null,[t("Use "),n("a",b,[t("basicSetup"),e(s)]),t(".")])]),n("tr",null,[y,w,n("td",null,[t("Use "),n("a",x,[t("miniSetup"),e(s)]),t(". If a "),q,t(" prop is also specified, that setting will take precedence.")])]),S,C,n("tr",null,[E,M,n("td",null,[t("Line text wrapping. see "),n("a",L,[t("lineWrapping"),e(s)]),t(".")])]),j,n("tr",null,[T,I,n("td",null,[t("Allow Multiple Selection. See "),n("a",D,[t("allowMultipleSelections"),e(s)])])]),N,P,n("tr",null,[V,U,n("td",null,[t("Specify the theme. For example, if you use "),n("a",B,[t("@codemirror/theme-one-dark"),e(s)]),t(", import "),O,t(" and put it in this prop.")])]),z,A,n("tr",null,[F,G,n("td",null,[t("The language you want to have syntax highlighting. see "),n("a",H,[t("https://codemirror.net/6/#languages"),e(s)])])]),n("tr",null,[W,R,n("td",null,[t("Specify here if you want to make the displayed character string multilingual. see "),n("a",X,[t("https://codemirror.net/6/examples/translate/"),e(s)])])]),Y,Z,n("tr",null,[$,J,n("td",null,[t("see "),n("a",K,[t("https://codemirror.net/docs/ref/#lint.linter^config"),e(s)])])]),Q,n("tr",null,[nn,tn,n("td",null,[t("see "),n("a",sn,[t("https://codemirror.net/docs/ref/#lint.lintGutter^config"),e(s)])])]),en])]),an])}const cn=a(p,[["render",on],["__file","code-editor.html.vue"]]);export{cn as default};
